#! /usr/bin/env python

version = '0.2'

# ===========================================
#  CONFIGURATION
# ===========================================
#  TODO: a better way of configuring this thing
def create_config():
    global frameworks 
    frameworks = dict()

    # no framework selected
    none = dict()
    none['name'] = 'none'
    none['css'] = 'css/'
    none['js']  = 'js/'
    none['img'] = 'img/'
    frameworks['none'] = none

    # fuelphp
    fuelphp = dict()
    fuelphp['name'] = 'fuelphp'
    fuelphp['url'] = 'https://github.com/fuel/fuel.git'
    fuelphp['css'] = 'public/assets/css/'
    fuelphp['js']  = 'public/assets/js/'
    fuelphp['img'] = 'public/assets/img/'
    frameworks['fuelphp'] = fuelphp

    # codeigniter
    codeigniter = dict()
    codeigniter['name'] = 'codeigniter'
    codeigniter['url'] = 'https://github.com/EllisLab/CodeIgniter.git'
    codeigniter['css'] = 'css/'
    codeigniter['js']  = 'js/'
    codeigniter['img'] = 'img/'
    codeigniter['codeigniter'] = codeigniter

    # cakephp
    cakephp = dict()
    cakephp['name'] = 'cakephp'
    cakephp['url'] = 'https://github.com/cakephp/cakephp.git'
    cakephp['css'] = 'app/webroot/css/ '
    cakephp['js']  = 'app/webroot/js/'
    cakephp['img'] = 'app/webroot/img/'
    cakephp['cakephp'] = cakephp

    global assets
    assets = dict()

    # bootstrap (css and js, minified)
    bootstrap = dict()
    bootstrap['name'] = 'bootstrap'
    bootstrap['css'] = 'http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/css/bootstrap.min.css'
    bootstrap['js'] = 'http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/js/bootstrap.min.js'
    bootstrap['img'] = 'http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/img/glyphicons-halflings.png'
    assets['bootstrap'] = bootstrap

# ===========================================
#  NEW PROJECT
# ===========================================
def new_project(args):
    project_name = args['name']

    if args['framework'] in frameworks:
        project_framework = frameworks.get(args['framework'])
    else:
        print 'You supplied a framework that is not yet implemented.'
        sys.exit(0)

    if args['assets']:
        project_assets = dict()
        for i in args['assets']:
            if i in assets:
                project_assets[i] = assets[i]
            else:
                print 'You supplied an asset that is not yet implemented.'
                sys.exit(0)

    # create directory
    project_dir = os.getcwd() + '/' + project_name + '/'
    if not os.path.exists(project_dir):
        print 'Creating \'' + project_name + '\' directory...'
        os.makedirs(project_dir)
    else:
        print 'Can\'t create \'' + project_name + '\' directory. It already exists.'
        sys.exit(0)

    # checkout framework
    if project_framework['name'] != "none":
        os.system('git clone ' + project_framework['url'] + ' ' + project_dir)
        os.system('rm -rf ' + project_dir + '.git*')
        os.system('git init ' + project_dir)
    else:
        os.system('mkdir ' + project_dir + 'css')
        os.system('mkdir ' + project_dir + 'js')
        os.system('mkdir ' + project_dir + 'img')

    # grab assets
    if args['assets']:
        for i in project_assets:
            for j in project_assets[i]:
                filename = project_assets[i][j].split('/')[-1]
                if j == 'css':
                    print 'Adding ' + filename + ' stylesheet ...'
                    os.system('curl --silent ' + project_assets[i][j] + ' > ' 
                              + project_dir + project_framework['css'] + filename)
                elif j == 'js':
                    print 'Adding ' + filename + ' script ...'
                    os.system('curl --silent ' + project_assets[i][j] + ' > ' 
                              + project_dir + project_framework['js'] + filename)
                elif j == 'img':
                    print 'Adding ' + filename + ' images ...'
                    os.system('curl --silent ' + project_assets[i][j] + ' > ' 
                              + project_dir + project_framework['img'] + filename)


# ===========================================
#  LIST OPTIONS
# ===========================================
def list_options():
    print ''
    print 'Available frameworks:'
    for i in frameworks:
        print '  ' + i

    print ''
    print 'Available assets:'
    for i in assets:
        print '  ' + i

    print ''

# ===========================================
#  UPDATE LEAF
# ===========================================
def update_leaf():
    print 'Updating...'
    os.system('curl -s https://raw.github.com/maxmackie/leaf/master/install.sh | sh')

# ===========================================
#  VERSION
# ===========================================
def show_version():
    print 'leaf version ' + version

# ===========================================
#  ROUTING
# ===========================================
import argparse
import sys
import os

parser = argparse.ArgumentParser(prog='leaf')
subparsers = parser.add_subparsers()

parse_new = subparsers.add_parser('new')
parse_new.add_argument('name', help='Name of the new project, used to create the directory')
parse_new.add_argument('-f', '--framework', help='The framework to use for the project', required=True)
parse_new.add_argument('-a', '--assets', help='A list of assets to download for the framework', nargs='+', required=False)
parse_new.set_defaults(subparser='new')

parse_list = subparsers.add_parser('list')
parse_list.set_defaults(subparser='list')

parse_update = subparsers.add_parser('update')
parse_update.set_defaults(subparser='update')

parse_version = subparsers.add_parser('version')
parse_version.set_defaults(subparser='version')

args = vars(parser.parse_args())

create_config()

if args['subparser'] == 'new':
    new_project(args)
elif args['subparser'] == 'list':
    list_options()
elif args['subparser'] == 'update':
    update_leaf()
elif args['subparser'] == 'version':
    show_version()